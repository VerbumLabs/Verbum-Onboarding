// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: gPere25tZXJ8DN5wLAbNNx
// Component: SslDFE8uw30X

import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";
import { useRouter } from "next/router";
import { submitItem } from "../../../scripts/add-item.ts";
import Wallet from "../../ThirdWebWallet";
import { useWallet } from "../../WalletContext.js";
import { useAddress } from "@thirdweb-dev/react";

import {
  Flex as Flex__,
  MultiChoiceArg,
  PlasmicDataSourceContextProvider as PlasmicDataSourceContextProvider__,
  PlasmicIcon as PlasmicIcon__,
  PlasmicImg as PlasmicImg__,
  PlasmicLink as PlasmicLink__,
  PlasmicPageGuard as PlasmicPageGuard__,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  Stack as Stack__,
  StrictProps,
  Trans as Trans__,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  ensureGlobalVariants,
  generateOnMutateForSpec,
  generateStateOnChangeProp,
  generateStateOnChangePropForCodeComponents,
  generateStateValueProp,
  get as $stateGet,
  hasVariant,
  initializeCodeComponentStates,
  initializePlasmicStates,
  makeFragment,
  omit,
  pick,
  renderPlasmicSlot,
  set as $stateSet,
  useCurrentUser,
  useDollarState,
  usePlasmicTranslator,
  useTrigger,
  wrapWithClassName
} from "@plasmicapp/react-web";
import {
  DataCtxReader as DataCtxReader__,
  useDataEnv,
  useGlobalActions
} from "@plasmicapp/react-web/lib/host";
import { UploadWrapper } from "@plasmicpkgs/antd5/skinny/registerUpload";
import { AntdButton } from "@plasmicpkgs/antd5/skinny/registerButton";
import { FormWrapper } from "@plasmicpkgs/antd5/skinny/Form";
import { formHelpers as FormWrapper_Helpers } from "@plasmicpkgs/antd5/skinny/Form";
import { FormItemWrapper } from "@plasmicpkgs/antd5/skinny/FormItem";
import { AntdInput } from "@plasmicpkgs/antd5/skinny/registerInput";
import { inputHelpers as AntdInput_Helpers } from "@plasmicpkgs/antd5/skinny/registerInput";
import { AntdInputNumber } from "@plasmicpkgs/antd5/skinny/registerInput";
import { AntdSelect } from "@plasmicpkgs/antd5/skinny/registerSelect";
import { AntdTextArea } from "@plasmicpkgs/antd5/skinny/registerInput";
import { inputHelpers as AntdTextArea_Helpers } from "@plasmicpkgs/antd5/skinny/registerInput";
import { Fetcher } from "@plasmicapp/react-web/lib/data-sources";

import "@plasmicapp/react-web/lib/plasmic.css";

import plasmic_antd_5_hostless_css from "../antd_5_hostless/plasmic.module.css"; // plasmic-import: ohDidvG9XsCeFumugENU3J/projectcss
import projectcss from "./plasmic.module.css"; // plasmic-import: gPere25tZXJ8DN5wLAbNNx/projectcss
import sty from "./PlasmicUploadItem.module.css"; // plasmic-import: SslDFE8uw30X/css

import Icon7Icon from "./icons/PlasmicIcon__Icon7"; // plasmic-import: WNrOKOGZa0w2/icon
import Icon8Icon from "./icons/PlasmicIcon__Icon8"; // plasmic-import: Db8zntDAjUz9/icon

createPlasmicElementProxy;

export type PlasmicUploadItem__VariantMembers = {};
export type PlasmicUploadItem__VariantsArgs = {};
type VariantPropType = keyof PlasmicUploadItem__VariantsArgs;
export const PlasmicUploadItem__VariantProps = new Array<VariantPropType>();

export type PlasmicUploadItem__ArgsType = {};
type ArgPropType = keyof PlasmicUploadItem__ArgsType;
export const PlasmicUploadItem__ArgProps = new Array<ArgPropType>();

export type PlasmicUploadItem__OverridesType = {
  root?: Flex__<"div">;
  h1?: Flex__<"h1">;
  upload?: Flex__<typeof UploadWrapper>;
  form2?: Flex__<typeof FormWrapper>;
  numberInput?: Flex__<typeof AntdInputNumber>;
  textArea?: Flex__<typeof AntdTextArea>;
};

export interface DefaultUploadItemProps {}

const $$ = {};

function useNextRouter() {
  try {
    return useRouter();
  } catch {}
  return undefined;
}

// const wallet = useWallet();
// const walletAddress = wallet ? wallet.address : null;

function PlasmicUploadItem__RenderFunc(props: {
  variants: PlasmicUploadItem__VariantsArgs;
  args: PlasmicUploadItem__ArgsType;
  overrides: PlasmicUploadItem__OverridesType;
  forNode?: string;
  walletAddress?: walletAddress;
}) {
  const { variants, overrides, forNode } = props;
  const args = React.useMemo(() => Object.assign({}, props.args), [props.args]);

  const $props = {
    ...args,
    ...variants
  };

  const __nextRouter = useNextRouter();
  const $ctx = useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;

  const currentUser = useCurrentUser?.() || {};

  const stateSpecs: Parameters<typeof useDollarState>[0] = React.useMemo(
    () => [
      {
        path: "form2.value",
        type: "private",
        variableType: "object",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined,

        refName: "form2",
        onMutate: generateOnMutateForSpec("value", FormWrapper_Helpers)
      },
      {
        path: "form2.isSubmitting",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => false,

        refName: "form2",
        onMutate: generateOnMutateForSpec("isSubmitting", FormWrapper_Helpers)
      },
      {
        path: "upload.files",
        type: "private",
        variableType: "array",
        initFunc: ({ $props, $state, $queries, $ctx }) => []
      }
    ],
    [$props, $ctx, $refs]
  );
  const $state = useDollarState(stateSpecs, {
    $props,
    $ctx,
    $queries: {},
    $refs
  });


  const address = useAddress();
  const wallet = useWallet();
console.log("wallet uplod wallet", wallet, address);

const walletAddress = wallet ? wallet.address : null;

  return (
    <React.Fragment>
      <Head>
        <meta name="twitter:card" content="summary" />
        <title key="title">{PlasmicUploadItem.pageMetadata.title}</title>
        <meta
          key="og:title"
          property="og:title"
          content={PlasmicUploadItem.pageMetadata.title}
        />
        <meta
          key="twitter:title"
          name="twitter:title"
          content={PlasmicUploadItem.pageMetadata.title}
        />
      </Head>

      <style>{`
        body {
          margin: 0;
        }
      `}</style>

      <div className={projectcss.plasmic_page_wrapper}>
        <Stack__
          as={"div"}
          data-plasmic-name={"root"}
          data-plasmic-override={overrides.root}
          data-plasmic-root={true}
          data-plasmic-for-node={forNode}
          hasGap={true}
          className={classNames(
            projectcss.all,
            projectcss.root_reset,
            projectcss.plasmic_default_styles,
            projectcss.plasmic_mixins,
            projectcss.plasmic_tokens,
            plasmic_antd_5_hostless_css.plasmic_tokens,
            sty.root
          )}
        >
          <Stack__
            as={"div"}
            hasGap={true}
            className={classNames(projectcss.all, sty.freeBox__o8XQn)}
          >
          <div className={classNames(projectcss.all, sty.freeBox__zftvs)}>
              <PlasmicImg__
                alt={""}
                className={classNames(sty.img__mv3L5)}
                displayHeight={"auto"}
                displayMaxHeight={"150px"}
                displayMaxWidth={"auto"}
                displayMinHeight={"0"}
                displayMinWidth={"0"}
                displayWidth={"auto"}
                loading={"lazy"}
                src={{
                  src: "/plasmic/verbum_onboarding/images/screenshot20231204At123248AmRemovebgpng.png",
                  fullWidth: 2712,
                  fullHeight: 1792,
                  aspectRatio: undefined
                }}
                onClick={async event => {
                  const $steps = {};
  
                  $steps["goToHomepage"] = true
                    ? (() => {
                        const actionArgs = { destination: `/onboarding` };
                        return (({ destination }) => {
                          if (
                            typeof destination === "string" &&
                            destination.startsWith("#")
                          ) {
                            document
                              .getElementById(destination.substr(1))
                              .scrollIntoView({ behavior: "smooth" });
                          } else {
                            __nextRouter?.push(destination);
                          }
                        })?.apply(null, [actionArgs]);
                      })()
                    : undefined;
                  if (
                    $steps["goToHomepage"] != null &&
                    typeof $steps["goToHomepage"] === "object" &&
                    typeof $steps["goToHomepage"].then === "function"
                  ) {
                    $steps["goToHomepage"] = await $steps["goToHomepage"];
                  }
                }}
              />
            </div>
            <div>
              <Wallet />
            </div>
            <Icon7Icon
              className={classNames(projectcss.all, sty.svg__npcAb)}
              onClick={async event => {
                const $steps = {};

                $steps["goToHttpstwittercomVerbumLabs"] = true
                  ? (() => {
                      const actionArgs = {
                        destination: "https://twitter.com/VerbumLabs"
                      };
                      return (({ destination }) => {
                        if (
                          typeof destination === "string" &&
                          destination.startsWith("#")
                        ) {
                          document
                            .getElementById(destination.substr(1))
                            .scrollIntoView({ behavior: "smooth" });
                        } else {
                          __nextRouter?.push(destination);
                        }
                      })?.apply(null, [actionArgs]);
                    })()
                  : undefined;
                if (
                  $steps["goToHttpstwittercomVerbumLabs"] != null &&
                  typeof $steps["goToHttpstwittercomVerbumLabs"] === "object" &&
                  typeof $steps["goToHttpstwittercomVerbumLabs"].then ===
                    "function"
                ) {
                  $steps["goToHttpstwittercomVerbumLabs"] = await $steps[
                    "goToHttpstwittercomVerbumLabs"
                  ];
                }
              }}
              role={"img"}
            />

            <Icon8Icon
              className={classNames(projectcss.all, sty.svg__otBx0)}
              onClick={async event => {
                const $steps = {};

                $steps["goToHttpsdiscordggcvzUAkzcS7"] = true
                  ? (() => {
                      const actionArgs = {
                        destination: "https://discord.gg/cvzUAkzcS7"
                      };
                      return (({ destination }) => {
                        if (
                          typeof destination === "string" &&
                          destination.startsWith("#")
                        ) {
                          document
                            .getElementById(destination.substr(1))
                            .scrollIntoView({ behavior: "smooth" });
                        } else {
                          __nextRouter?.push(destination);
                        }
                      })?.apply(null, [actionArgs]);
                    })()
                  : undefined;
                if (
                  $steps["goToHttpsdiscordggcvzUAkzcS7"] != null &&
                  typeof $steps["goToHttpsdiscordggcvzUAkzcS7"] === "object" &&
                  typeof $steps["goToHttpsdiscordggcvzUAkzcS7"].then ===
                    "function"
                ) {
                  $steps["goToHttpsdiscordggcvzUAkzcS7"] = await $steps[
                    "goToHttpsdiscordggcvzUAkzcS7"
                  ];
                }
              }}
              role={"img"}
            />
          </Stack__>
          <div className={classNames(projectcss.all, sty.freeBox___1U0Kr)}>
            <h1
              data-plasmic-name={"h1"}
              data-plasmic-override={overrides.h1}
              className={classNames(
                projectcss.all,
                projectcss.h1,
                projectcss.__wab_text,
                sty.h1
              )}
            >
              {"Add New Item"}
            </h1>
            <div
              className={classNames(
                projectcss.all,
                projectcss.__wab_text,
                sty.text___1PWck
              )}
            >
              {
                "Add your items. They will be put on the market when Verbum launches shortly."
              }
            </div>
          </div>
          <div className={classNames(projectcss.all, sty.freeBox___0Ghob)}>
            <div className={classNames(projectcss.all, sty.freeBox___6Iidt)}>
              <UploadWrapper
                data-plasmic-name={"upload"}
                data-plasmic-override={overrides.upload}
                accept={"image/*"}
                className={classNames("__wab_instance", sty.upload)}
                dragAndDropFiles={true}
                files={generateStateValueProp($state, ["upload", "files"])}
                listType={"picture"}
                maxCount={1}
                onFilesChange={generateStateOnChangeProp($state, [
                  "upload",
                  "files"
                ])}
                showUploadList={true}
              >
                <AntdButton
                  className={classNames("__wab_instance", sty.button__xOpbu)}
                >
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__xH0O
                    )}
                  >
                    {"Upload"}
                  </div>
                </AntdButton>
              </UploadWrapper>
            </div>
            <div className={classNames(projectcss.all, sty.freeBox__oFjm2)}>
              {(() => {
                const child$Props = {
                  className: classNames("__wab_instance", sty.form2),
                  extendedOnValuesChange:
                    generateStateOnChangePropForCodeComponents(
                      $state,
                      "value",
                      ["form2", "value"],
                      FormWrapper_Helpers
                    ),
                  formItems: undefined,
                  labelCol: { span: 8, horizontalOnly: true },
                  layout: "vertical",
                  mode: undefined,
                  onFinish: async (values) => {
                    // Assemble the data as needed by the backend
                    const itemData = {
                        walletAddress: walletAddress,
                        name: values.name,
                        description: values.message,  // Ensure 'message' is mapped correctly in your form
                        price: parseFloat(values.price),  // Parse as float to ensure numeric type
                        brand: values.brand,
                        royaltyPercentage: parseInt(values.royaltyPercentage, 10),  // Parse as float
                        durationMonths: parseInt(values.durationMonths, 10),  // Parse as integer
                        condition: values.condition
                    };
                    console.log(itemData);
                    console.log("Submitting form with address:", itemData.walletAddress);
                    // Call submitItem to send data to the backend
                    await submitItem(itemData);
                  },
                  onIsSubmittingChange:
                    generateStateOnChangePropForCodeComponents(
                      $state,
                      "isSubmitting",
                      ["form2", "isSubmitting"],
                      FormWrapper_Helpers
                    ),
                  ref: ref => {
                    $refs["form2"] = ref;
                  },
                  wrapperCol: { span: 16, horizontalOnly: true }
                };
                initializeCodeComponentStates(
                  $state,
                  [
                    {
                      name: "value",
                      plasmicStateName: "form2.value"
                    },
                    {
                      name: "isSubmitting",
                      plasmicStateName: "form2.isSubmitting"
                    }
                  ],
                  [],
                  FormWrapper_Helpers ?? {},
                  child$Props
                );

                return (
                  <FormWrapper
                    data-plasmic-name={"form2"}
                    data-plasmic-override={overrides.form2}
                    onIsSubmittingChange={() => {
                      console.log('lksjdkljlkjlkjlkjlkjljljlk');
                    }} 
                    {...child$Props}
                  >
                    <FormItemWrapper
                      className={classNames(
                        "__wab_instance",
                        sty.formField__sbk8P
                      )}
                      label={"Item Name"}
                      name={"name"}
                      rules={[{ ruleType: "required" }]}
                    >
                        <AntdInput
                          className={classNames(
                            "__wab_instance",
                            sty.input__s55EM
                          )}
                          style={{ color: "#000000" }}
                        />
                      </FormItemWrapper>
                    <FormItemWrapper
                      className={classNames(
                        "__wab_instance",
                        sty.formField__imOgp
                      )}
                      label={"Brand"}
                      name={"brand"}
                      rules={[
                        { ruleType: "required" }
                      ]}
                    >
                      <AntdInput
                        className={classNames(
                          "__wab_instance",
                          sty.input__rDaf7
                        )}
                        style={{ color: "#000000" }}
                      />
                    </FormItemWrapper>
                    <FormItemWrapper
                      className={classNames(
                        "__wab_instance",
                        sty.formField__c64X0
                      )}
                      label={"Price (USD)"}
                      name={"price"}
                      rules={[
                        { ruleType: "required" }
                      ]}
                    >
                      <AntdInputNumber
                        className={classNames(
                          "__wab_instance",
                          sty.numberInput
                        )}
                        type={"number"}
                      />
                    </FormItemWrapper>
                    <FormItemWrapper
                      className={classNames(
                        "__wab_instance",
                        sty.formField__hTNy
                      )}
                      initialValue={"5%"}
                      label={"Royalty Percentage"}
                      name={"royaltyPercentage"}
                      rules={[{ ruleType: "required" }]}
                    >
                      <AntdSelect
                        className={classNames(
                          "__wab_instance",
                          sty.select__k7ZtV
                        )}
                        defaultStylesClassName={classNames(
                          projectcss.root_reset,
                          projectcss.plasmic_default_styles,
                          projectcss.plasmic_mixins,
                          projectcss.plasmic_tokens,
                          plasmic_antd_5_hostless_css.plasmic_tokens
                        )}
                        options={(() => {
                          const __composite = [
                            { value: '2.5', label: '2.5%' },
                            { value: '5', label: '5%' },
                            { value: '7.5', label: '7.5%' },
                            { value: '10', label: '10%' }
                          ];
                          return __composite;
                        })()}
                        placeholder={"Select..."}
                        popupScopeClassName={sty["select__k7ZtV__popup"]}
                      />
                    </FormItemWrapper>
                    <FormItemWrapper
                      className={classNames(
                        "__wab_instance",
                        sty.formField__y3Bal
                      )}
                      label={"Description"}
                      name={"message"}
                      rules={[{ ruleType: "required" }]}
                    >
                      <AntdTextArea
                        className={classNames("__wab_instance", sty.textArea)}
                      />
                    </FormItemWrapper>
                    <FormItemWrapper
                      className={classNames(
                        "__wab_instance",
                        sty.formField__dPhut
                      )}
                      label={"Condition"}
                      name={"condition"}
                      rules={[{ ruleType: "required" }]}
                    >
                      <AntdSelect
                        className={classNames(
                          "__wab_instance",
                          sty.select___6Yw7K
                        )}
                        defaultStylesClassName={classNames(
                          projectcss.root_reset,
                          projectcss.plasmic_default_styles,
                          projectcss.plasmic_mixins,
                          projectcss.plasmic_tokens,
                          plasmic_antd_5_hostless_css.plasmic_tokens
                        )}
                        options={(() => {
                          const __composite = [
                            { value: 'new', label: 'New' },
                            { value: 'veryGood', label: 'Very Good' },
                            { value: 'good', label: 'Good' },
                            { value: 'fair', label: 'Fair' }
                          ];
                          return __composite;
                        })()}
                        placeholder={"Select..."}
                        popupScopeClassName={sty["select___6Yw7K__popup"]}
                      />
                    </FormItemWrapper>
                    <FormItemWrapper
                      className={classNames(
                        "__wab_instance",
                        sty.formField__bp9Us
                      )}
                      label={"Listing Duration (months)"}
                      name={"durationMonths"}
                      rules={[{ ruleType: "required" }]}
                    >
                      <AntdSelect
                        className={classNames(
                          "__wab_instance",
                          sty.select__xMogB
                        )}
                        defaultStylesClassName={classNames(
                          projectcss.root_reset,
                          projectcss.plasmic_default_styles,
                          projectcss.plasmic_mixins,
                          projectcss.plasmic_tokens,
                          plasmic_antd_5_hostless_css.plasmic_tokens
                        )}
                        options={(() => {
                          const __composite = [
                            { value: "2", label: "2" },
                            { value: "3", label: "3" },
                            { value: "4", label: "4" },
                            { value: "5", label: "5" },
                            { value: "6", label: "6" },
                            { value: "7", label: "7" },
                            { value: "8", label: "8" },
                            { value: "9", label: "9" },
                            { value: "10", label: "10" },
                            { value: "11", label: "11" },
                            { value: "12", label: "12" }
                          ];
                          return __composite;
                        })()}
                        placeholder={"Select..."}
                        popupScopeClassName={sty["select__xMogB__popup"]}
                      />
                    </FormItemWrapper>
                    <AntdButton
                      className={classNames(
                        "__wab_instance",
                        sty.button__griEj
                      )}
                      submitsForm={true}
                      type={"primary"}
                      onClick={async event => {
                        const $steps = {};
        
                        $steps["goSellerProfile"] = true
                          ? (() => {
                              const actionArgs = { destination: `/seller-profile` };
                              return (({ destination }) => {
                                if (
                                  typeof destination === "string" &&
                                  destination.startsWith("#")
                                ) {
                                  document
                                    .getElementById(destination.substr(1))
                                    .scrollIntoView({ behavior: "smooth" });
                                } else {
                                  __nextRouter?.push(destination);
                                }
                              })?.apply(null, [actionArgs]);
                            })()
                          : undefined;
                        if (
                          $steps["goToSellerProfile"] != null &&
                          typeof $steps["goToSellerProfile"] === "object" &&
                          typeof $steps["goToSellerProfile"].then === "function"
                        ) {
                          $steps["goToSellerProfile"] = await $steps["goToSellerProfile"];
                        }
                      }}
                    >
                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text___67Qt0
                        )}
                      >
                        {"Submit"}
                      </div>
                    </AntdButton>
                  </FormWrapper>
                );
              })()}
            </div>
          </div>
          <div className={classNames(projectcss.all, sty.freeBox__tWx0E)}>
            <div className={classNames(projectcss.all, sty.freeBox__dLsK4)}>
              <PlasmicImg__
                alt={""}
                className={classNames(sty.img__o1Wk4)}
                displayHeight={"150px"}
                displayMaxHeight={"none"}
                displayMaxWidth={"100%"}
                displayMinHeight={"0"}
                displayMinWidth={"0"}
                displayWidth={"auto"}
                loading={"lazy"}
                src={{
                  src: "/plasmic/verbum_onboarding/images/screenshot20231204At123248AmRemovebgpng.png",
                  fullWidth: 2712,
                  fullHeight: 1792,
                  aspectRatio: undefined
                }}
              />
            </div>
          </div>
          <div className={classNames(projectcss.all, sty.freeBox__hsHDg)}>
            <div
              className={classNames(
                projectcss.all,
                projectcss.__wab_text,
                sty.text__p05ZY
              )}
            >
              {"Copyright \u00a9 2024 Verbum Labs Inc."}
            </div>
          </div>
        </Stack__>
      </div>
    </React.Fragment>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: ["root", "h1", "upload", "form2", "numberInput", "textArea"],
  h1: ["h1"],
  upload: ["upload"],
  form2: ["form2", "numberInput", "textArea"],
  numberInput: ["numberInput"],
  textArea: ["textArea"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  (typeof PlasmicDescendants)[T][number];
type NodeDefaultElementType = {
  root: "div";
  h1: "h1";
  upload: typeof UploadWrapper;
  form2: typeof FormWrapper;
  numberInput: typeof AntdInputNumber;
  textArea: typeof AntdTextArea;
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicUploadItem__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicUploadItem__VariantsArgs;
    args?: PlasmicUploadItem__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicUploadItem__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    /* Specify args directly as props*/ Omit<
      PlasmicUploadItem__ArgsType,
      ReservedPropsType
    > &
    /* Specify overrides for each element directly as props*/ Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    /* Specify props for the root element*/ Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicUploadItem__ArgProps,
          internalVariantPropNames: PlasmicUploadItem__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicUploadItem__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicUploadItem";
  } else {
    func.displayName = `PlasmicUploadItem.${nodeName}`;
  }
  return func;
}

export const PlasmicUploadItem = Object.assign(
  // Top-level PlasmicUploadItem renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    h1: makeNodeComponent("h1"),
    upload: makeNodeComponent("upload"),
    form2: makeNodeComponent("form2"),
    numberInput: makeNodeComponent("numberInput"),
    textArea: makeNodeComponent("textArea"),

    // Metadata about props expected for PlasmicUploadItem
    internalVariantProps: PlasmicUploadItem__VariantProps,
    internalArgProps: PlasmicUploadItem__ArgProps,

    // Page metadata
    pageMetadata: {
      title: "UploadItem",
      description: "",
      ogImageSrc: "",
      canonical: ""
    }
  }
);


export default PlasmicUploadItem;
/* prettier-ignore-end */