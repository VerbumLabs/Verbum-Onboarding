// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: gPere25tZXJ8DN5wLAbNNx
// Component: 5b3Ic_l1nIpC

import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";
import { useRouter } from "next/router";
import Wallet from "../../ThirdWebWallet";
import { useWallet } from "../../WalletContext.js";
import { useAddress } from "@thirdweb-dev/react";
import { getVerificationStatus } from "../../../scripts/get-verification-status";
import { useState } from 'react';
// src/App.js
import {
  ThirdwebProvider,
  ConnectWallet,
  metamaskWallet,
  embeddedWallet,
  coinbaseWallet,
  walletConnect,
  smartWallet,
} from "@thirdweb-dev/react";
import { Optimism } from "@thirdweb-dev/chains";
import { darkTheme, lightTheme } from "@thirdweb-dev/react";
const customDarkTheme = darkTheme({
  fontFamily: "Inter, sans-serif",
  colors: {
    modalBg: "#000000",
    accentText: "blue",
    // ... etc
  },
});

const smartWalletOptions = {
  factoryAddress: "0xd7CC4fe0FCAcD12092155F5E1777740EFfcb1329",
  gasless: true
};

import {
  Flex as Flex__,
  MultiChoiceArg,
  PlasmicDataSourceContextProvider as PlasmicDataSourceContextProvider__,
  PlasmicIcon as PlasmicIcon__,
  PlasmicImg as PlasmicImg__,
  PlasmicLink as PlasmicLink__,
  PlasmicPageGuard as PlasmicPageGuard__,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  Stack as Stack__,
  StrictProps,
  Trans as Trans__,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  ensureGlobalVariants,
  generateOnMutateForSpec,
  generateStateOnChangeProp,
  generateStateOnChangePropForCodeComponents,
  generateStateValueProp,
  get as $stateGet,
  hasVariant,
  initializeCodeComponentStates,
  initializePlasmicStates,
  makeFragment,
  omit,
  pick,
  renderPlasmicSlot,
  set as $stateSet,
  useCurrentUser,
  useDollarState,
  usePlasmicTranslator,
  useTrigger,
  wrapWithClassName
} from "@plasmicapp/react-web";
import {
  DataCtxReader as DataCtxReader__,
  useDataEnv,
  useGlobalActions
} from "@plasmicapp/react-web/lib/host";

import Button from "../../Button"; // plasmic-import: WJBFN552Km_Y/component

import "@plasmicapp/react-web/lib/plasmic.css";

import plasmic_antd_5_hostless_css from "../antd_5_hostless/plasmic.module.css"; // plasmic-import: ohDidvG9XsCeFumugENU3J/projectcss
import projectcss from "./plasmic.module.css"; // plasmic-import: gPere25tZXJ8DN5wLAbNNx/projectcss
import sty from "./PlasmicSellorBuy.module.css"; // plasmic-import: 5b3Ic_l1nIpC/css

import Icon7Icon from "./icons/PlasmicIcon__Icon7"; // plasmic-import: WNrOKOGZa0w2/icon
import Icon8Icon from "./icons/PlasmicIcon__Icon8"; // plasmic-import: Db8zntDAjUz9/icon
import ChecksvgIcon from "./icons/PlasmicIcon__Checksvg"; // plasmic-import: _w1MXYoHNAL4/icon
import Icon4Icon from "./icons/PlasmicIcon__Icon4"; // plasmic-import: XXxSktuUg6AL/icon

createPlasmicElementProxy;

export type PlasmicSellorBuy__VariantMembers = {};
export type PlasmicSellorBuy__VariantsArgs = {};
type VariantPropType = keyof PlasmicSellorBuy__VariantsArgs;
export const PlasmicSellorBuy__VariantProps = new Array<VariantPropType>();

export type PlasmicSellorBuy__ArgsType = {};
type ArgPropType = keyof PlasmicSellorBuy__ArgsType;
export const PlasmicSellorBuy__ArgProps = new Array<ArgPropType>();

export type PlasmicSellorBuy__OverridesType = {
  root?: Flex__<"div">;
};

export interface DefaultSellorBuyProps {}

const $$ = {};

function useNextRouter() {
  try {
    return useRouter();
  } catch {}
  return undefined;
}

function PlasmicSellorBuy__RenderFunc(props: {
  variants: PlasmicSellorBuy__VariantsArgs;
  args: PlasmicSellorBuy__ArgsType;
  overrides: PlasmicSellorBuy__OverridesType;
  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const args = React.useMemo(() => Object.assign({}, props.args), [props.args]);

  const $props = {
    ...args,
    ...variants
  };

  const __nextRouter = useNextRouter();
  const $ctx = useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;

  const currentUser = useCurrentUser?.() || {};

  const address = useAddress();
  const wallet = useWallet();
  console.log("wallet uplod wallet", wallet, address);
  const walletAddress = wallet ? wallet.address : null;
  const [isConnected, setIsConnected] = useState(false);
  const handleRedirect = async () => {
    try {
      const verified = await getVerificationStatus(wallet);
      console.log(wallet);
      console.log("Verification status: ", verified);

      // Redirect based on the verification status
      if (verified) {
        __nextRouter.push('/seller-profile');
      } else {
        __nextRouter.push('/seller-verification');
      }
    } catch (error) {
      console.error("Failed to check verification status:", error);
    }
    setIsConnected(true); // Hide the wallet connect UI after connection
  };
  

  return (
    <React.Fragment>
      <Head>
        <meta name="twitter:card" content="summary" />
        <title key="title">{PlasmicSellorBuy.pageMetadata.title}</title>
        <meta
          key="og:title"
          property="og:title"
          content={PlasmicSellorBuy.pageMetadata.title}
        />
        <meta
          key="twitter:title"
          name="twitter:title"
          content={PlasmicSellorBuy.pageMetadata.title}
        />
      </Head>

      <style>{`
        body {
          margin: 0;
        }
      `}</style>

      <div className={projectcss.plasmic_page_wrapper}>
        <Stack__
          as={"div"}
          data-plasmic-name={"root"}
          data-plasmic-override={overrides.root}
          data-plasmic-root={true}
          data-plasmic-for-node={forNode}
          hasGap={true}
          className={classNames(
            projectcss.all,
            projectcss.root_reset,
            projectcss.plasmic_default_styles,
            projectcss.plasmic_mixins,
            projectcss.plasmic_tokens,
            plasmic_antd_5_hostless_css.plasmic_tokens,
            sty.root
          )}
        >
          <Stack__
            as={"div"}
            hasGap={true}
            className={classNames(projectcss.all, sty.freeBox__cHhrT)}
          >
            <div className={classNames(projectcss.all, sty.freeBox__sApg9)}>
              <PlasmicImg__
                alt={""}
                className={classNames(sty.img___1Q4We)}
                displayHeight={"auto"}
                displayMaxHeight={"150px"}
                displayMaxWidth={"auto"}
                displayMinHeight={"0"}
                displayMinWidth={"0"}
                displayWidth={"auto"}
                loading={"lazy"}
                src={{
                  src: "/plasmic/verbum_onboarding/images/screenshot20231204At123248AmRemovebgpng.png",
                  fullWidth: 2712,
                  fullHeight: 1792,
                  aspectRatio: undefined
                }}
                onClick={ async event => {
                  const $steps = {};

                  $steps["goToHome"] = true
                    ? (() => {
                        const actionArgs = {
                          destination: `/onboarding`
                        };
                        return (({ destination }) => {
                          if (
                            typeof destination === "string" &&
                            destination.startsWith("#")
                          ) {
                            document
                              .getElementById(destination.substr(1))
                              .scrollIntoView({ behavior: "smooth" });
                          } else {
                            __nextRouter?.push(destination);
                          }
                        })?.apply(null, [actionArgs]);
                      })()
                    : undefined;
                  if (
                    $steps["goToHome"] != null &&
                    typeof $steps["goToHome"] === "object" &&
                    typeof $steps["goToHome"].then === "function"
                  ) {
                    $steps["goToHome"] = await $steps[
                      "goToHome"
                    ];
                  }
                }}
              />
            </div>
            <box style={{ paddingBottom: '20px', paddingRight: '24px' }}>
              <div> <Wallet /> 
              </div>
            </box>
            <Icon7Icon
              className={classNames(projectcss.all, sty.svg__doOa7)}
              onClick={event => {
                window.open('https://twitter.com/VerbumLabs', '_blank');
              }}
              role={"img"}
            />

            <Icon8Icon
              className={classNames(projectcss.all, sty.svg__nzcOj)}
              onClick={event => {
                window.open('https://discord.gg/cvzUAkzcS7', '_blank');
              }}
              role={"img"}
              role={"img"}
            />
          </Stack__>
          <div className={classNames(projectcss.all, sty.freeBox__hZn6F)}>
            <div className={classNames(projectcss.all, sty.freeBox__vOp4Y)}>
              <h1
                className={classNames(
                  projectcss.all,
                  projectcss.h1,
                  projectcss.__wab_text,
                  sty.h1___93NnG
                )}
              >
                {"Get Started"}
              </h1>
              <div className={classNames(projectcss.all, sty.freeBox__ka6E5)}>
                <div className={classNames(projectcss.all, sty.freeBox__hyQyO)}>
                  <div
                    className={classNames(projectcss.all, sty.freeBox__arRvs)}
                  >
                    <h1
                      className={classNames(
                        projectcss.all,
                        projectcss.h1,
                        projectcss.__wab_text,
                        sty.h1__srZ8U
                      )}
                    >
                      {"Sell"}
                    </h1>
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__guoxd
                      )}
                    >
                      {"Sign-up and onboard your items to Verbum. "}
                    </div>
                    <div>
                        {
                          !walletAddress ? (          
                            <ThirdwebProvider
                                activeChain={Optimism}
                                clientId="aeea0e409104d28890235e065a914b03"
                                supportedWallets={[
                                  metamaskWallet({ recommended: true }),
                                  smartWallet(
                                    embeddedWallet({ recommended: true }),
                                    smartWalletOptions
                                  ),
                                  coinbaseWallet(),
                                  walletConnect(),
                                ]}
                              > 
                                      <ConnectWallet
                                        theme={customDarkTheme}
                                        modalSize={"wide"}
                                        btnTitle="Sell on Verbum"
                                        font={"inherit"}
                                        onConnect={handleRedirect}
                                      />
                              </ThirdwebProvider>
                          ) : (
                            // Otherwise, render the Button component
                            <Button
                              className={classNames("__wab_instance", sty.button__qyrCs)}
                              onClick={async event => {
                                try {
                                  const verified = await getVerificationStatus(walletAddress);
                                  console.log(walletAddress);
                                  console.log("HI ITS ME HODOL, its the wallet verification status!!!", verified);
                                  
                                  // Based on the verification status, redirect to the appropriate page
                                  if (verified) {
                                    __nextRouter.push('/seller-profile');
                                  } else {
                                    __nextRouter.push('/seller-verification');
                                  }
                                } catch (error) {
                                  console.error("Failed to check verification status:", error);
                                  // Handle errors, possibly navigate to an error page or display a message
                                }
                              }}
                            >
                              {"Sell on Verbum"}
                            </Button>
                          )
                        }
                  </div>
                  </div>
                  <div
                    className={classNames(projectcss.all, sty.freeBox___9IggF)}
                  >
                    <h1
                      className={classNames(
                        projectcss.all,
                        projectcss.h1,
                        projectcss.__wab_text,
                        sty.h1__s2Zbu
                      )}
                    >
                      {"Buy"}
                    </h1>
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__rwmft
                      )}
                    >
                      {"Buy and trade on the value of luxury goods."}
                    </div>
                    <div>
                        {
                          !walletAddress ? (          
                            <ThirdwebProvider
                                activeChain={Optimism}
                                clientId="aeea0e409104d28890235e065a914b03"
                                supportedWallets={[
                                  metamaskWallet({ recommended: true }),
                                  smartWallet(
                                    embeddedWallet({ recommended: true }),
                                    smartWalletOptions
                                  ),
                                  coinbaseWallet(),
                                  walletConnect(),
                                ]}
                              > 
                                      <ConnectWallet
                                        theme={customDarkTheme}
                                        modalSize={"wide"}
                                        btnTitle="Buy on Verbum"
                                        onConnect={async () => {
                                          try {
                                            const verified = await getVerificationStatus(walletAddress);
                                            console.log(walletAddress);
                                            console.log("Verification status: ", verified);
                                      
                                            // Redirect based on the verification status
                                            __nextRouter.push('/comingsoon');
                                          } catch (error) {
                                            console.error("Failed to check verification status:", error);
                                            // Optionally handle errors, such as showing an error message
                                          }
                                        }}
                                      />
                              </ThirdwebProvider>
                          ) : (
                            // Otherwise, render the Button component
                            <Button
                              className={classNames("__wab_instance", sty.button__raDB)}
                              onClick={async event => {
                                const $steps = {};

                                $steps["goToComingSoon"] = true
                                  ? (() => {
                                      const actionArgs = { destination: `/comingsoon` };
                                      return (({ destination }) => {
                                        if (
                                          typeof destination === "string" &&
                                          destination.startsWith("#")
                                        ) {
                                          document
                                            .getElementById(destination.substr(1))
                                            .scrollIntoView({ behavior: "smooth" });
                                        } else {
                                          __nextRouter?.push(destination);
                                        }
                                      })?.apply(null, [actionArgs]);
                                    })()
                                  : undefined;
                                if (
                                  $steps["goToComingSoon"] != null &&
                                  typeof $steps["goToComingSoon"] === "object" &&
                                  typeof $steps["goToComingSoon"].then === "function"
                                ) {
                                  $steps["goToComingSoon"] = await $steps[
                                    "goToComingSoon"
                                  ];
                                }
                              }}
                            >
                              <div
                                className={classNames(
                                  projectcss.all,
                                  projectcss.__wab_text,
                                  sty.text___7Kxbw
                                )}
                              >
                                {"Buy on Verbum"}
                              </div>
                            </Button>
                          )
                        }
                  </div>
                  </div>
                </div>
              </div>
            </div>
          </div>
          <div className={classNames(projectcss.all, sty.freeBox__yIeQj)}>
            <div className={classNames(projectcss.all, sty.freeBox__g3H8H)}>
              <PlasmicImg__
                alt={""}
                className={classNames(sty.img___4ZnU)}
                displayHeight={"150px"}
                displayMaxHeight={"none"}
                displayMaxWidth={"100%"}
                displayMinHeight={"0"}
                displayMinWidth={"0"}
                displayWidth={"auto"}
                loading={"lazy"}
                src={{
                  src: "/plasmic/verbum_onboarding/images/screenshot20231204At123248AmRemovebgpng.png",
                  fullWidth: 2712,
                  fullHeight: 1792,
                  aspectRatio: undefined
                }}
              />
            </div>
          </div>
          <div className={classNames(projectcss.all, sty.freeBox__v7MrY)}>
            <div
              className={classNames(
                projectcss.all,
                projectcss.__wab_text,
                sty.text__mv5M
              )}
            >
              {"Copyright \u00a9 2024 Verbum Labs Inc."}
            </div>
          </div>
        </Stack__>
      </div>
    </React.Fragment>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: ["root"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  (typeof PlasmicDescendants)[T][number];
type NodeDefaultElementType = {
  root: "div";
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicSellorBuy__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicSellorBuy__VariantsArgs;
    args?: PlasmicSellorBuy__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicSellorBuy__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    /* Specify args directly as props*/ Omit<
      PlasmicSellorBuy__ArgsType,
      ReservedPropsType
    > &
    /* Specify overrides for each element directly as props*/ Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    /* Specify props for the root element*/ Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicSellorBuy__ArgProps,
          internalVariantPropNames: PlasmicSellorBuy__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicSellorBuy__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicSellorBuy";
  } else {
    func.displayName = `PlasmicSellorBuy.${nodeName}`;
  }
  return func;
}

export const PlasmicSellorBuy = Object.assign(
  // Top-level PlasmicSellorBuy renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements

    // Metadata about props expected for PlasmicSellorBuy
    internalVariantProps: PlasmicSellorBuy__VariantProps,
    internalArgProps: PlasmicSellorBuy__ArgProps,

    // Page metadata
    pageMetadata: {
      title: "Sell or Buy",
      description: "",
      ogImageSrc: "",
      canonical: ""
    }
  }
);

export default PlasmicSellorBuy;
/* prettier-ignore-end */
