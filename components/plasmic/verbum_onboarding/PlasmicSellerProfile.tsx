// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: gPere25tZXJ8DN5wLAbNNx
// Component: SslDFE8uw30X

import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";
import { useRouter } from "next/router";

import {
  Flex as Flex__,
  MultiChoiceArg,
  PlasmicDataSourceContextProvider as PlasmicDataSourceContextProvider__,
  PlasmicIcon as PlasmicIcon__,
  PlasmicImg as PlasmicImg__,
  PlasmicLink as PlasmicLink__,
  PlasmicPageGuard as PlasmicPageGuard__,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  Stack as Stack__,
  StrictProps,
  Trans as Trans__,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  ensureGlobalVariants,
  generateOnMutateForSpec,
  generateStateOnChangeProp,
  generateStateOnChangePropForCodeComponents,
  generateStateValueProp,
  get as $stateGet,
  hasVariant,
  initializeCodeComponentStates,
  initializePlasmicStates,
  makeFragment,
  omit,
  pick,
  renderPlasmicSlot,
  set as $stateSet,
  useCurrentUser,
  useDollarState,
  usePlasmicTranslator,
  useTrigger,
  wrapWithClassName
} from "@plasmicapp/react-web";
import {
  DataCtxReader as DataCtxReader__,
  useDataEnv,
  useGlobalActions
} from "@plasmicapp/react-web/lib/host";

import { Fetcher } from "@plasmicapp/react-web/lib/data-sources";

import "@plasmicapp/react-web/lib/plasmic.css";

import plasmic_antd_5_hostless_css from "../antd_5_hostless/plasmic.module.css"; // plasmic-import: ohDidvG9XsCeFumugENU3J/projectcss
import projectcss from "./plasmic.module.css"; // plasmic-import: gPere25tZXJ8DN5wLAbNNx/projectcss
import sty from "./PlasmicSellerProfile.module.css"; // plasmic-import: SslDFE8uw30X/css

import Icon7Icon from "./icons/PlasmicIcon__Icon7"; // plasmic-import: WNrOKOGZa0w2/icon
import Icon8Icon from "./icons/PlasmicIcon__Icon8"; // plasmic-import: Db8zntDAjUz9/icon

createPlasmicElementProxy;

export type PlasmicSellerProfile__VariantMembers = {};
export type PlasmicSellerProfile__VariantsArgs = {};
type VariantPropType = keyof PlasmicSellerProfile__VariantsArgs;
export const PlasmicSellerProfile__VariantProps = new Array<VariantPropType>();

export type PlasmicSellerProfile__ArgsType = {};
type ArgPropType = keyof PlasmicSellerProfile__ArgsType;
export const PlasmicSellerProfile__ArgProps = new Array<ArgPropType>();

export type PlasmicSellerProfile__OverridesType = {
  root?: Flex__<"div">;
  h1?: Flex__<"h1">;
  text?: Flex__<"div">;
};

export interface DefaultSellerProfileProps {}

const $$ = {};

function useNextRouter() {
  try {
    return useRouter();
  } catch {}
  return undefined;
}

function PlasmicSellerProfile__RenderFunc(props: {
  variants: PlasmicSellerProfile__VariantsArgs;
  args: PlasmicSellerProfile__ArgsType;
  overrides: PlasmicSellerProfile__OverridesType;
  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const args = React.useMemo(() => Object.assign({}, props.args), [props.args]);

  const $props = {
    ...args,
    ...variants
  };

  const __nextRouter = useNextRouter();
  const $ctx = useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;

  const currentUser = useCurrentUser?.() || {};

  return (
    <React.Fragment>
      <Head>
        <meta name="twitter:card" content="summary" />
        <title key="title">{PlasmicSellerProfile.pageMetadata.title}</title>
        <meta
          key="og:title"
          property="og:title"
          content={PlasmicSellerProfile.pageMetadata.title}
        />
        <meta
          key="twitter:title"
          name="twitter:title"
          content={PlasmicSellerProfile.pageMetadata.title}
        />
      </Head>

      <style>{`
        body {
          margin: 0;
        }
      `}</style>

      <div className={projectcss.plasmic_page_wrapper}>
        <Stack__
          as={"div"}
          data-plasmic-name={"root"}
          data-plasmic-override={overrides.root}
          data-plasmic-root={true}
          data-plasmic-for-node={forNode}
          hasGap={true}
          className={classNames(
            projectcss.all,
            projectcss.root_reset,
            projectcss.plasmic_default_styles,
            projectcss.plasmic_mixins,
            projectcss.plasmic_tokens,
            plasmic_antd_5_hostless_css.plasmic_tokens,
            sty.root
          )}
        >
          <Stack__
            as={"div"}
            hasGap={true}
            className={classNames(projectcss.all, sty.freeBox__o8XQn)}
          >
            <div className={classNames(projectcss.all, sty.freeBox__zftvs)}>
              <PlasmicImg__
                alt={""}
                className={classNames(sty.img__mv3L5)}
                displayHeight={"auto"}
                displayMaxHeight={"150px"}
                displayMaxWidth={"auto"}
                displayMinHeight={"0"}
                displayMinWidth={"0"}
                displayWidth={"auto"}
                loading={"lazy"}
                src={{
                  src: "/plasmic/verbum_onboarding/images/screenshot20231204At123248AmRemovebgpng.png",
                  fullWidth: 2712,
                  fullHeight: 1792,
                  aspectRatio: undefined
                }}
              />
            </div>
            <Icon7Icon
              className={classNames(projectcss.all, sty.svg__npcAb)}
              onClick={async event => {
                const $steps = {};

                $steps["goToHttpstwittercomVerbumLabs"] = true
                  ? (() => {
                      const actionArgs = {
                        destination: "https://twitter.com/VerbumLabs"
                      };
                      return (({ destination }) => {
                        if (
                          typeof destination === "string" &&
                          destination.startsWith("#")
                        ) {
                          document
                            .getElementById(destination.substr(1))
                            .scrollIntoView({ behavior: "smooth" });
                        } else {
                          __nextRouter?.push(destination);
                        }
                      })?.apply(null, [actionArgs]);
                    })()
                  : undefined;
                if (
                  $steps["goToHttpstwittercomVerbumLabs"] != null &&
                  typeof $steps["goToHttpstwittercomVerbumLabs"] === "object" &&
                  typeof $steps["goToHttpstwittercomVerbumLabs"].then ===
                    "function"
                ) {
                  $steps["goToHttpstwittercomVerbumLabs"] = await $steps[
                    "goToHttpstwittercomVerbumLabs"
                  ];
                }
              }}
              role={"img"}
            />

            <Icon8Icon
              className={classNames(projectcss.all, sty.svg__otBx0)}
              onClick={async event => {
                const $steps = {};

                $steps["goToHttpsdiscordggcvzUAkzcS7"] = true
                  ? (() => {
                      const actionArgs = {
                        destination: "https://discord.gg/cvzUAkzcS7"
                      };
                      return (({ destination }) => {
                        if (
                          typeof destination === "string" &&
                          destination.startsWith("#")
                        ) {
                          document
                            .getElementById(destination.substr(1))
                            .scrollIntoView({ behavior: "smooth" });
                        } else {
                          __nextRouter?.push(destination);
                        }
                      })?.apply(null, [actionArgs]);
                    })()
                  : undefined;
                if (
                  $steps["goToHttpsdiscordggcvzUAkzcS7"] != null &&
                  typeof $steps["goToHttpsdiscordggcvzUAkzcS7"] === "object" &&
                  typeof $steps["goToHttpsdiscordggcvzUAkzcS7"].then ===
                    "function"
                ) {
                  $steps["goToHttpsdiscordggcvzUAkzcS7"] = await $steps[
                    "goToHttpsdiscordggcvzUAkzcS7"
                  ];
                }
              }}
              role={"img"}
            />
          </Stack__>
          <div className={classNames(projectcss.all, sty.freeBox___1U0Kr)}>
            <h1
              data-plasmic-name={"h1"}
              data-plasmic-override={overrides.h1}
              className={classNames(
                projectcss.all,
                projectcss.h1,
                projectcss.__wab_text,
                sty.h1
              )}
            >
              {"Seller Profile"}
            </h1>
          </div>
          <div className={classNames(projectcss.all, sty.freeBox___0Ghob)}>
            <div className={classNames(projectcss.all, sty.freeBox___6Iidt)} />

            <div className={classNames(projectcss.all, sty.freeBox__oFjm2)} />
          </div>
          <div className={classNames(projectcss.all, sty.freeBox__tWx0E)}>
            <div className={classNames(projectcss.all, sty.freeBox__dLsK4)}>
              <PlasmicImg__
                alt={""}
                className={classNames(sty.img__o1Wk4)}
                displayHeight={"150px"}
                displayMaxHeight={"none"}
                displayMaxWidth={"100%"}
                displayMinHeight={"0"}
                displayMinWidth={"0"}
                displayWidth={"auto"}
                loading={"lazy"}
                src={{
                  src: "/plasmic/verbum_onboarding/images/screenshot20231204At123248AmRemovebgpng.png",
                  fullWidth: 2712,
                  fullHeight: 1792,
                  aspectRatio: undefined
                }}
              />
            </div>
          </div>
          <div className={classNames(projectcss.all, sty.freeBox__hsHDg)}>
            <div
              data-plasmic-name={"text"}
              data-plasmic-override={overrides.text}
              className={classNames(
                projectcss.all,
                projectcss.__wab_text,
                sty.text
              )}
            >
              {"Copyright \u00a9 2024 Verbum Labs Inc."}
            </div>
          </div>
        </Stack__>
      </div>
    </React.Fragment>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: ["root", "h1", "text"],
  h1: ["h1"],
  text: ["text"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  (typeof PlasmicDescendants)[T][number];
type NodeDefaultElementType = {
  root: "div";
  h1: "h1";
  text: "div";
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicSellerProfile__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicSellerProfile__VariantsArgs;
    args?: PlasmicSellerProfile__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicSellerProfile__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    /* Specify args directly as props*/ Omit<
      PlasmicSellerProfile__ArgsType,
      ReservedPropsType
    > &
    /* Specify overrides for each element directly as props*/ Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    /* Specify props for the root element*/ Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicSellerProfile__ArgProps,
          internalVariantPropNames: PlasmicSellerProfile__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicSellerProfile__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicSellerProfile";
  } else {
    func.displayName = `PlasmicSellerProfile.${nodeName}`;
  }
  return func;
}

export const PlasmicSellerProfile = Object.assign(
  // Top-level PlasmicSellerProfile renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    h1: makeNodeComponent("h1"),
    text: makeNodeComponent("text"),

    // Metadata about props expected for PlasmicSellerProfile
    internalVariantProps: PlasmicSellerProfile__VariantProps,
    internalArgProps: PlasmicSellerProfile__ArgProps,

    // Page metadata
    pageMetadata: {
      title: "Seller Profile",
      description: "",
      ogImageSrc: "",
      canonical: ""
    }
  }
);

export default PlasmicSellerProfile;
/* prettier-ignore-end */
