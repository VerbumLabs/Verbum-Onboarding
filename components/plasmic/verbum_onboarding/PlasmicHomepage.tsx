// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: gPere25tZXJ8DN5wLAbNNx
// Component: Q0aPCtp6SqNy

import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";
import { useRouter } from "next/router";

import {
  Flex as Flex__,
  MultiChoiceArg,
  PlasmicDataSourceContextProvider as PlasmicDataSourceContextProvider__,
  PlasmicIcon as PlasmicIcon__,
  PlasmicImg as PlasmicImg__,
  PlasmicLink as PlasmicLink__,
  PlasmicPageGuard as PlasmicPageGuard__,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  Stack as Stack__,
  StrictProps,
  Trans as Trans__,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  ensureGlobalVariants,
  generateOnMutateForSpec,
  generateStateOnChangeProp,
  generateStateOnChangePropForCodeComponents,
  generateStateValueProp,
  get as $stateGet,
  hasVariant,
  initializeCodeComponentStates,
  initializePlasmicStates,
  makeFragment,
  omit,
  pick,
  renderPlasmicSlot,
  set as $stateSet,
  useCurrentUser,
  useDollarState,
  usePlasmicTranslator,
  useTrigger,
  wrapWithClassName
} from "@plasmicapp/react-web";
import {
  DataCtxReader as DataCtxReader__,
  useDataEnv,
  useGlobalActions
} from "@plasmicapp/react-web/lib/host";

import Button from "../../Button"; // plasmic-import: WJBFN552Km_Y/component
import VerbumFooter from "../../VerbumFooter"; // plasmic-import: z-inCbAmtHs6/component
import { Fetcher } from "@plasmicapp/react-web/lib/data-sources";

import { useScreenVariants as useScreenVariants_9Et3CbDnt6Nw } from "./PlasmicGlobalVariant__Screen"; // plasmic-import: 9Et3CbDNT6nw/globalVariant

import "@plasmicapp/react-web/lib/plasmic.css";

import plasmic_antd_5_hostless_css from "../antd_5_hostless/plasmic.module.css"; // plasmic-import: ohDidvG9XsCeFumugENU3J/projectcss
import projectcss from "./plasmic.module.css"; // plasmic-import: gPere25tZXJ8DN5wLAbNNx/projectcss
import sty from "./PlasmicHomepage.module.css"; // plasmic-import: Q0aPCtp6SqNy/css

import ChecksvgIcon from "./icons/PlasmicIcon__Checksvg"; // plasmic-import: _w1MXYoHNAL4/icon
import Icon4Icon from "./icons/PlasmicIcon__Icon4"; // plasmic-import: XXxSktuUg6AL/icon
import Icon7Icon from "./icons/PlasmicIcon__Icon7"; // plasmic-import: WNrOKOGZa0w2/icon
import Icon8Icon from "./icons/PlasmicIcon__Icon8"; // plasmic-import: Db8zntDAjUz9/icon
import Icon9Icon from "./icons/PlasmicIcon__Icon9"; // plasmic-import: MrTQzJgyX_2c/icon
import Icon10Icon from "./icons/PlasmicIcon__Icon10"; // plasmic-import: E6D4zbaXJEQj/icon
import Icon11Icon from "./icons/PlasmicIcon__Icon11"; // plasmic-import: eauQvn-sbapg/icon

createPlasmicElementProxy;

export type PlasmicHomepage__VariantMembers = {};
export type PlasmicHomepage__VariantsArgs = {};
type VariantPropType = keyof PlasmicHomepage__VariantsArgs;
export const PlasmicHomepage__VariantProps = new Array<VariantPropType>();

export type PlasmicHomepage__ArgsType = {};
type ArgPropType = keyof PlasmicHomepage__ArgsType;
export const PlasmicHomepage__ArgProps = new Array<ArgPropType>();

export type PlasmicHomepage__OverridesType = {
  root?: Flex__<"div">;
  h2?: Flex__<"h2">;
  verbumFooter?: Flex__<typeof VerbumFooter>;
};

export interface DefaultHomepageProps {}

const $$ = {};

function useNextRouter() {
  try {
    return useRouter();
  } catch {}
  return undefined;
}

function PlasmicHomepage__RenderFunc(props: {
  variants: PlasmicHomepage__VariantsArgs;
  args: PlasmicHomepage__ArgsType;
  overrides: PlasmicHomepage__OverridesType;
  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const args = React.useMemo(() => Object.assign({}, props.args), [props.args]);

  const $props = {
    ...args,
    ...variants
  };

  const __nextRouter = useNextRouter();
  const $ctx = useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;

  const currentUser = useCurrentUser?.() || {};

  const globalVariants = ensureGlobalVariants({
    screen: useScreenVariants_9Et3CbDnt6Nw()
  });

  return (
    <React.Fragment>
      <Head>
        <meta name="twitter:card" content="summary" />
        <title key="title">{PlasmicHomepage.pageMetadata.title}</title>
        <meta
          key="og:title"
          property="og:title"
          content={PlasmicHomepage.pageMetadata.title}
        />
        <meta
          key="twitter:title"
          name="twitter:title"
          content={PlasmicHomepage.pageMetadata.title}
        />
      </Head>

      <style>{`
        body {
          margin: 0;
        }
      `}</style>

      <div className={projectcss.plasmic_page_wrapper}>
        <Stack__
          as={"div"}
          data-plasmic-name={"root"}
          data-plasmic-override={overrides.root}
          data-plasmic-root={true}
          data-plasmic-for-node={forNode}
          hasGap={true}
          className={classNames(
            projectcss.all,
            projectcss.root_reset,
            projectcss.plasmic_default_styles,
            projectcss.plasmic_mixins,
            projectcss.plasmic_tokens,
            plasmic_antd_5_hostless_css.plasmic_tokens,
            sty.root
          )}
        >
          <Stack__
            as={"div"}
            hasGap={true}
            className={classNames(projectcss.all, sty.freeBox__tvYke)}
          >
            <div className={classNames(projectcss.all, sty.freeBox__mpiyB)}>
              <PlasmicImg__
                alt={""}
                className={classNames(sty.img__jr08R)}
                displayHeight={"auto"}
                displayMaxHeight={"150px"}
                displayMaxWidth={"auto"}
                displayMinHeight={"0"}
                displayMinWidth={"0"}
                displayWidth={"auto"}
                loading={"lazy"}
                src={{
                  src: "/plasmic/verbum_onboarding/images/screenshot20231204At123248AmRemovebgpng.png",
                  fullWidth: 2712,
                  fullHeight: 1792,
                  aspectRatio: undefined
                }}
              />
            </div>
            <Button
              className={classNames("__wab_instance", sty.button___5QNhr)}
              color={"white"}
              onClick={async event => {
                const $steps = {};

                $steps["goToConnect"] = true
                  ? (() => {
                      const actionArgs = { destination: `/connect` };
                      return (({ destination }) => {
                        if (
                          typeof destination === "string" &&
                          destination.startsWith("#")
                        ) {
                          document
                            .getElementById(destination.substr(1))
                            .scrollIntoView({ behavior: "smooth" });
                        } else {
                          __nextRouter?.push(destination);
                        }
                      })?.apply(null, [actionArgs]);
                    })()
                  : undefined;
                if (
                  $steps["goToConnect"] != null &&
                  typeof $steps["goToConnect"] === "object" &&
                  typeof $steps["goToConnect"].then === "function"
                ) {
                  $steps["goToConnect"] = await $steps["goToConnect"];
                }
              }}
              submitsForm={true}
            >
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__oevJ6
                )}
              >
                {"Connect"}
              </div>
            </Button>
            <Button
              className={classNames("__wab_instance", sty.button__e53OB)}
              color={"clear"}
              onClick={async event => {
                const $steps = {};

                $steps["goToSignup"] = true
                  ? (() => {
                      const actionArgs = { destination: `/signup` };
                      return (({ destination }) => {
                        if (
                          typeof destination === "string" &&
                          destination.startsWith("#")
                        ) {
                          document
                            .getElementById(destination.substr(1))
                            .scrollIntoView({ behavior: "smooth" });
                        } else {
                          __nextRouter?.push(destination);
                        }
                      })?.apply(null, [actionArgs]);
                    })()
                  : undefined;
                if (
                  $steps["goToSignup"] != null &&
                  typeof $steps["goToSignup"] === "object" &&
                  typeof $steps["goToSignup"].then === "function"
                ) {
                  $steps["goToSignup"] = await $steps["goToSignup"];
                }
              }}
              submitsForm={true}
            >
              {"Signup"}
            </Button>
            <Icon7Icon
              className={classNames(projectcss.all, sty.svg__af9Kn)}
              onClick={async event => {
                const $steps = {};

                $steps["goToHttpstwittercomVerbumLabs"] = true
                  ? (() => {
                      const actionArgs = {
                        destination: "https://twitter.com/VerbumLabs"
                      };
                      return (({ destination }) => {
                        if (
                          typeof destination === "string" &&
                          destination.startsWith("#")
                        ) {
                          document
                            .getElementById(destination.substr(1))
                            .scrollIntoView({ behavior: "smooth" });
                        } else {
                          __nextRouter?.push(destination);
                        }
                      })?.apply(null, [actionArgs]);
                    })()
                  : undefined;
                if (
                  $steps["goToHttpstwittercomVerbumLabs"] != null &&
                  typeof $steps["goToHttpstwittercomVerbumLabs"] === "object" &&
                  typeof $steps["goToHttpstwittercomVerbumLabs"].then ===
                    "function"
                ) {
                  $steps["goToHttpstwittercomVerbumLabs"] = await $steps[
                    "goToHttpstwittercomVerbumLabs"
                  ];
                }
              }}
              role={"img"}
            />

            <Icon8Icon
              className={classNames(projectcss.all, sty.svg__sCnT)}
              onClick={async event => {
                const $steps = {};

                $steps["goToHttpsdiscordggcvzUAkzcS7"] = true
                  ? (() => {
                      const actionArgs = {
                        destination: "https://discord.gg/cvzUAkzcS7"
                      };
                      return (({ destination }) => {
                        if (
                          typeof destination === "string" &&
                          destination.startsWith("#")
                        ) {
                          document
                            .getElementById(destination.substr(1))
                            .scrollIntoView({ behavior: "smooth" });
                        } else {
                          __nextRouter?.push(destination);
                        }
                      })?.apply(null, [actionArgs]);
                    })()
                  : undefined;
                if (
                  $steps["goToHttpsdiscordggcvzUAkzcS7"] != null &&
                  typeof $steps["goToHttpsdiscordggcvzUAkzcS7"] === "object" &&
                  typeof $steps["goToHttpsdiscordggcvzUAkzcS7"].then ===
                    "function"
                ) {
                  $steps["goToHttpsdiscordggcvzUAkzcS7"] = await $steps[
                    "goToHttpsdiscordggcvzUAkzcS7"
                  ];
                }
              }}
              role={"img"}
            />
          </Stack__>
          <div className={classNames(projectcss.all, sty.freeBox__vZzfd)}>
            <div className={classNames(projectcss.all, sty.freeBox___1Ivh9)}>
              <div className={classNames(projectcss.all, sty.freeBox___6R9J2)}>
                <h1
                  className={classNames(
                    projectcss.all,
                    projectcss.h1,
                    projectcss.__wab_text,
                    sty.h1__uDnbm
                  )}
                >
                  {"Don't just sell luxury, make recurring revenue"}
                </h1>
              </div>
              <div className={classNames(projectcss.all, sty.freeBox___8WQhi)}>
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__cal4W
                  )}
                >
                  {"Passive income is just a click away."}
                </div>
              </div>
              <div className={classNames(projectcss.all, sty.freeBox__tXm9B)}>
                <Button
                  className={classNames("__wab_instance", sty.button__mAbKy)}
                  onClick={async event => {
                    const $steps = {};

                    $steps["goToSignup"] = true
                      ? (() => {
                          const actionArgs = { destination: `/signup` };
                          return (({ destination }) => {
                            if (
                              typeof destination === "string" &&
                              destination.startsWith("#")
                            ) {
                              document
                                .getElementById(destination.substr(1))
                                .scrollIntoView({ behavior: "smooth" });
                            } else {
                              __nextRouter?.push(destination);
                            }
                          })?.apply(null, [actionArgs]);
                        })()
                      : undefined;
                    if (
                      $steps["goToSignup"] != null &&
                      typeof $steps["goToSignup"] === "object" &&
                      typeof $steps["goToSignup"].then === "function"
                    ) {
                      $steps["goToSignup"] = await $steps["goToSignup"];
                    }
                  }}
                >
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__v7Cn5
                    )}
                  >
                    {"Get Started"}
                  </div>
                </Button>
              </div>
            </div>
            <div className={classNames(projectcss.all, sty.freeBox__tO9O)}>
              <PlasmicImg__
                alt={""}
                className={classNames(sty.img__n5Wt9)}
                displayHeight={"auto"}
                displayMaxHeight={"none"}
                displayMaxWidth={"80%"}
                displayMinHeight={"0"}
                displayMinWidth={"0"}
                displayWidth={"auto"}
                loading={"lazy"}
                src={{
                  src: "/plasmic/verbum_onboarding/images/laurenzHeymannAl6S6JpnZisUnsplashjpg.jpg",
                  fullWidth: 6000,
                  fullHeight: 4000,
                  aspectRatio: undefined
                }}
              />
            </div>
          </div>
          <div className={classNames(projectcss.all, sty.freeBox__vdlg)}>
            <div className={classNames(projectcss.all, sty.freeBox__tA3)}>
              <h1
                className={classNames(
                  projectcss.all,
                  projectcss.h1,
                  projectcss.__wab_text,
                  sty.h1__xnGhn
                )}
              >
                {"How it Works"}
              </h1>
              <div className={classNames(projectcss.all, sty.freeBox__tvebp)}>
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__t1SBz
                  )}
                >
                  {
                    "Spend more time enjoying your love for luxury and less time figuring out how to pay for it."
                  }
                </div>
              </div>
            </div>
          </div>
          <div className={classNames(projectcss.all, sty.freeBox__vLdN)}>
            <div className={classNames(projectcss.all, sty.freeBox__pmpfO)}>
              <div className={classNames(projectcss.all, sty.freeBox__rQXga)}>
                <div className={classNames(projectcss.all, sty.freeBox__fNc0P)}>
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__fOD
                    )}
                  >
                    <React.Fragment>
                      <span
                        className={"plasmic_default__all plasmic_default__span"}
                        style={{ fontWeight: 700 }}
                      >
                        {"Turn any luxury good into a tradable digital asset"}
                      </span>
                    </React.Fragment>
                  </div>
                </div>
                <div className={classNames(projectcss.all, sty.freeBox__qVghC)}>
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__hgQzu
                    )}
                  >
                    {
                      "Verbum utilizes blockchain technology to seamlessly trade digital representations of your items, enabling you to earn real money."
                    }
                  </div>
                </div>
              </div>
              <div className={classNames(projectcss.all, sty.freeBox__yBrDo)}>
                <div className={classNames(projectcss.all, sty.freeBox__t2Zr6)}>
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text___6ZsZ
                    )}
                  >
                    {"Make recurring revenue"}
                  </div>
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__zLGp
                    )}
                  >
                    {
                      "After you place your item on Verbum and sell it, users can choose to sell it again on our marketplace. You will earn royalties of up to 10% from each and every sale of your item's digital representation. "
                    }
                  </div>
                </div>
              </div>
              <div className={classNames(projectcss.all, sty.freeBox__xu8Co)}>
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__kZkIy
                  )}
                >
                  {"Multiple sales, ship just once"}
                </div>
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__i7G1S
                  )}
                >
                  {
                    "Choose a shipping date up to two months after initially listing your item on Verbum. You'll ship the item to the current owner of its digital representation at that selected time."
                  }
                </div>
              </div>
              <div className={classNames(projectcss.all, sty.freeBox__x122Y)}>
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__yKf4T
                  )}
                >
                  {"Who can sell on Verbum?"}
                </div>
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text___4GAvq
                  )}
                >
                  {
                    "Businesses and individuals with a track record of sales can sell with Verbum. "
                  }
                </div>
              </div>
            </div>
            <div className={classNames(projectcss.all, sty.freeBox__fedio)}>
              <PlasmicImg__
                alt={""}
                className={classNames(sty.img__egPpn)}
                displayHeight={"auto"}
                displayMaxHeight={"none"}
                displayMaxWidth={"80%"}
                displayMinHeight={"0"}
                displayMinWidth={"0"}
                displayWidth={"auto"}
                loading={"lazy"}
                src={{
                  src: "/plasmic/verbum_onboarding/images/offWhiteAirJordan1TheTenAa383410140E45F5B87Fa64B48A54410Bca1Da5B31Jpg.jpg",
                  fullWidth: 900,
                  fullHeight: 637,
                  aspectRatio: undefined
                }}
              />
            </div>
          </div>
          <div className={classNames(projectcss.all, sty.freeBox__pDmuu)}>
            <div className={classNames(projectcss.all, sty.freeBox__yln1U)}>
              <div className={classNames(projectcss.all, sty.freeBox__hbTWn)}>
                <h1
                  className={classNames(
                    projectcss.all,
                    projectcss.h1,
                    projectcss.__wab_text,
                    sty.h1__qk6Os
                  )}
                >
                  {"The Next Generation of Luxury Resale"}
                </h1>
              </div>
              <div className={classNames(projectcss.all, sty.freeBox__giGWd)}>
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__y15T7
                  )}
                >
                  {"Out with the old, in with the new. "}
                </div>
              </div>
            </div>
          </div>
          <div className={classNames(projectcss.all, sty.freeBox__gRgm1)}>
            <div className={classNames(projectcss.all, sty.freeBox__qiCcO)}>
              <Icon9Icon
                className={classNames(projectcss.all, sty.svg__iQeo4)}
                role={"img"}
              />

              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__wv6Ry
                )}
              >
                {"Easy to Use"}
              </div>
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__btmaa
                )}
              >
                {
                  "Verbum abstracts away all of the confusing parts of crypto, making for a simple and easy-to-use platform."
                }
              </div>
            </div>
            <div className={classNames(projectcss.all, sty.freeBox__sOB7)}>
              <Icon10Icon
                className={classNames(projectcss.all, sty.svg__l5Pe5)}
                role={"img"}
              />

              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__hiC5H
                )}
              >
                {"Designed to Make Your Resale go Viral"}
              </div>
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__g4RKu
                )}
              >
                {
                  "You know you've got something valuable... we'll help you make the most from its sale. Verbum is designed to make the resale of hot items even hotter."
                }
              </div>
            </div>
            <div className={classNames(projectcss.all, sty.freeBox__grCty)}>
              <Icon11Icon
                className={classNames(projectcss.all, sty.svg__wd2P)}
                role={"img"}
              />

              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text___2IaDq
                )}
              >
                {"Safe & Secure"}
              </div>
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__zJhC
                )}
              >
                {
                  "Verbum is built by Stanford-educated engineers with experience at some of the world's best companies."
                }
              </div>
            </div>
          </div>
          <div className={classNames(projectcss.all, sty.freeBox__ydzBe)}>
            <div className={classNames(projectcss.all, sty.freeBox__mZdi7)}>
              <h1
                className={classNames(
                  projectcss.all,
                  projectcss.h1,
                  projectcss.__wab_text,
                  sty.h1__wwlCx
                )}
              >
                {"What can you sell?"}
              </h1>
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__j4Zfh
                )}
              >
                {
                  "You can sell any high-end, limited, or viral products on Verbum."
                }
              </div>
            </div>
          </div>
          <div className={classNames(projectcss.all, sty.freeBox__xbw1E)}>
            <div className={classNames(projectcss.all, sty.freeBox__gaeyz)}>
              <PlasmicImg__
                alt={""}
                className={classNames(sty.img__gKfca)}
                displayHeight={"auto"}
                displayMaxHeight={"none"}
                displayMaxWidth={"60%"}
                displayMinHeight={"0"}
                displayMinWidth={"0"}
                displayWidth={"auto"}
                loading={"lazy"}
                src={{
                  src: "/plasmic/verbum_onboarding/images/lesCabinotiersTigreMajestueuxjpg.jpg",
                  fullWidth: 1230,
                  fullHeight: 1205,
                  aspectRatio: undefined
                }}
              />

              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__qkdvn
                )}
              >
                {"Watches"}
              </div>
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__zETe5
                )}
              >
                {
                  "Rolex, Audemars Piguet, Patek Philippe, Vacheron Constantin\u2014you name it, we'll help you sell it. "
                }
              </div>
            </div>
            <div className={classNames(projectcss.all, sty.freeBox__ivFjM)}>
              <PlasmicImg__
                alt={""}
                className={classNames(sty.img__ycXg8)}
                displayHeight={"auto"}
                displayMaxHeight={"none"}
                displayMaxWidth={"60%"}
                displayMinHeight={"0"}
                displayMinWidth={"0"}
                displayWidth={"auto"}
                loading={"lazy"}
                src={{
                  src: "/plasmic/verbum_onboarding/images/_10003268002Jpg.jpg",
                  fullWidth: 1200,
                  fullHeight: 1200,
                  aspectRatio: undefined
                }}
              />

              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__vh1Sz
                )}
              >
                {"Handbags"}
              </div>
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__y5Fcz
                )}
              >
                {
                  "Into luxury bags? Monetize your obsession for Herm\u00e8s, Chanel, Louis Vuitton, Gucci and others. "
                }
              </div>
            </div>
            <div className={classNames(projectcss.all, sty.freeBox__omVa9)}>
              <PlasmicImg__
                alt={""}
                className={classNames(sty.img__q1GGx)}
                displayHeight={"auto"}
                displayMaxHeight={"none"}
                displayMaxWidth={"60%"}
                displayMinHeight={"0"}
                displayMinWidth={"0"}
                displayWidth={"auto"}
                loading={"lazy"}
                src={{
                  src: "/plasmic/verbum_onboarding/images/q74K5Z5Smf1Lqz7Rianwjpeg.jpg",
                  fullWidth: 620,
                  fullHeight: 596,
                  aspectRatio: undefined
                }}
              />

              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__mpGCk
                )}
              >
                {"And much more..."}
              </div>
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__iRFqt
                )}
              >
                {
                  "Looking to sell other luxury or limited items? From guitars to sneakers, we've got you covered."
                }
              </div>
            </div>
          </div>
          <h2
            data-plasmic-name={"h2"}
            data-plasmic-override={overrides.h2}
            className={classNames(
              projectcss.all,
              projectcss.h2,
              projectcss.__wab_text,
              sty.h2
            )}
          >
            {"Remove the hassle of selling luxury items"}
          </h2>
          <div className={classNames(projectcss.all, sty.freeBox__nt2IB)}>
            <div
              className={classNames(
                projectcss.all,
                projectcss.__wab_text,
                sty.text__uBjwj
              )}
            >
              {
                "Our fees are about 75% less than those of other resale platforms. Discover how \nVerbum can maximize your earnings today.\n"
              }
            </div>
          </div>
          <Stack__
            as={"div"}
            hasGap={true}
            className={classNames(projectcss.all, sty.freeBox__pEcAz)}
          >
            <Button
              className={classNames("__wab_instance", sty.button__jtQeK)}
              color={"white"}
              onClick={async event => {
                const $steps = {};

                $steps["goToSignup"] = true
                  ? (() => {
                      const actionArgs = { destination: `/signup` };
                      return (({ destination }) => {
                        if (
                          typeof destination === "string" &&
                          destination.startsWith("#")
                        ) {
                          document
                            .getElementById(destination.substr(1))
                            .scrollIntoView({ behavior: "smooth" });
                        } else {
                          __nextRouter?.push(destination);
                        }
                      })?.apply(null, [actionArgs]);
                    })()
                  : undefined;
                if (
                  $steps["goToSignup"] != null &&
                  typeof $steps["goToSignup"] === "object" &&
                  typeof $steps["goToSignup"].then === "function"
                ) {
                  $steps["goToSignup"] = await $steps["goToSignup"];
                }
              }}
              submitsForm={true}
            >
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text___1Xq9R
                )}
              >
                {"Sell on Verbum"}
              </div>
            </Button>
          </Stack__>
          <VerbumFooter
            data-plasmic-name={"verbumFooter"}
            data-plasmic-override={overrides.verbumFooter}
            className={classNames("__wab_instance", sty.verbumFooter)}
          />

          <div className={classNames(projectcss.all, sty.freeBox__doDtx)}>
            <div
              className={classNames(
                projectcss.all,
                projectcss.__wab_text,
                sty.text__oxtXe
              )}
            >
              {"Copyright \u00a9 2024 Verbum Labs Inc."}
            </div>
          </div>
        </Stack__>
      </div>
    </React.Fragment>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: ["root", "h2", "verbumFooter"],
  h2: ["h2"],
  verbumFooter: ["verbumFooter"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  (typeof PlasmicDescendants)[T][number];
type NodeDefaultElementType = {
  root: "div";
  h2: "h2";
  verbumFooter: typeof VerbumFooter;
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicHomepage__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicHomepage__VariantsArgs;
    args?: PlasmicHomepage__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicHomepage__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    /* Specify args directly as props*/ Omit<
      PlasmicHomepage__ArgsType,
      ReservedPropsType
    > &
    /* Specify overrides for each element directly as props*/ Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    /* Specify props for the root element*/ Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicHomepage__ArgProps,
          internalVariantPropNames: PlasmicHomepage__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicHomepage__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicHomepage";
  } else {
    func.displayName = `PlasmicHomepage.${nodeName}`;
  }
  return func;
}

export const PlasmicHomepage = Object.assign(
  // Top-level PlasmicHomepage renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    h2: makeNodeComponent("h2"),
    verbumFooter: makeNodeComponent("verbumFooter"),

    // Metadata about props expected for PlasmicHomepage
    internalVariantProps: PlasmicHomepage__VariantProps,
    internalArgProps: PlasmicHomepage__ArgProps,

    // Page metadata
    pageMetadata: {
      title: "Home",
      description: "",
      ogImageSrc: "",
      canonical: ""
    }
  }
);

export default PlasmicHomepage;
/* prettier-ignore-end */
