// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: gPere25tZXJ8DN5wLAbNNx
// Component: zs3GWX_dCQgx

import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";
import { useRouter } from "next/router";
import Wallet from "../../ThirdWebWallet";

import {
  Flex as Flex__,
  MultiChoiceArg,
  PlasmicDataSourceContextProvider as PlasmicDataSourceContextProvider__,
  PlasmicIcon as PlasmicIcon__,
  PlasmicImg as PlasmicImg__,
  PlasmicLink as PlasmicLink__,
  PlasmicPageGuard as PlasmicPageGuard__,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  Stack as Stack__,
  StrictProps,
  Trans as Trans__,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  ensureGlobalVariants,
  generateOnMutateForSpec,
  generateStateOnChangeProp,
  generateStateOnChangePropForCodeComponents,
  generateStateValueProp,
  get as $stateGet,
  hasVariant,
  initializeCodeComponentStates,
  initializePlasmicStates,
  makeFragment,
  omit,
  pick,
  renderPlasmicSlot,
  set as $stateSet,
  useCurrentUser,
  useDollarState,
  usePlasmicTranslator,
  useTrigger,
  wrapWithClassName
} from "@plasmicapp/react-web";
import {
  DataCtxReader as DataCtxReader__,
  useDataEnv,
  useGlobalActions
} from "@plasmicapp/react-web/lib/host";

import VerbumFooter from "../../VerbumFooter"; // plasmic-import: z-inCbAmtHs6/component
import { Fetcher } from "@plasmicapp/react-web/lib/data-sources";

import "@plasmicapp/react-web/lib/plasmic.css";

import plasmic_antd_5_hostless_css from "../antd_5_hostless/plasmic.module.css"; // plasmic-import: ohDidvG9XsCeFumugENU3J/projectcss
import projectcss from "./plasmic.module.css"; // plasmic-import: gPere25tZXJ8DN5wLAbNNx/projectcss
import sty from "./PlasmicComingSoon.module.css"; // plasmic-import: zs3GWX_dCQgx/css

import Icon7Icon from "./icons/PlasmicIcon__Icon7"; // plasmic-import: WNrOKOGZa0w2/icon
import Icon8Icon from "./icons/PlasmicIcon__Icon8"; // plasmic-import: Db8zntDAjUz9/icon

createPlasmicElementProxy;

export type PlasmicComingSoon__VariantMembers = {};
export type PlasmicComingSoon__VariantsArgs = {};
type VariantPropType = keyof PlasmicComingSoon__VariantsArgs;
export const PlasmicComingSoon__VariantProps = new Array<VariantPropType>();

export type PlasmicComingSoon__ArgsType = {};
type ArgPropType = keyof PlasmicComingSoon__ArgsType;
export const PlasmicComingSoon__ArgProps = new Array<ArgPropType>();

export type PlasmicComingSoon__OverridesType = {
  root?: Flex__<"div">;
  h1?: Flex__<"h1">;
  verbumFooter?: Flex__<typeof VerbumFooter>;
};

export interface DefaultComingSoonProps {}

const $$ = {};

function useNextRouter() {
  try {
    return useRouter();
  } catch {}
  return undefined;
}

function PlasmicComingSoon__RenderFunc(props: {
  variants: PlasmicComingSoon__VariantsArgs;
  args: PlasmicComingSoon__ArgsType;
  overrides: PlasmicComingSoon__OverridesType;
  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const args = React.useMemo(() => Object.assign({}, props.args), [props.args]);

  const $props = {
    ...args,
    ...variants
  };

  const __nextRouter = useNextRouter();
  const $ctx = useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;

  const currentUser = useCurrentUser?.() || {};

  return (
    <React.Fragment>
      <Head>
        <meta name="twitter:card" content="summary" />
        <title key="title">{PlasmicComingSoon.pageMetadata.title}</title>
        <meta
          key="og:title"
          property="og:title"
          content={PlasmicComingSoon.pageMetadata.title}
        />
        <meta
          key="twitter:title"
          name="twitter:title"
          content={PlasmicComingSoon.pageMetadata.title}
        />
      </Head>

      <style>{`
        body {
          margin: 0;
        }
      `}</style>

      <div className={projectcss.plasmic_page_wrapper}>
        <Stack__
          as={"div"}
          data-plasmic-name={"root"}
          data-plasmic-override={overrides.root}
          data-plasmic-root={true}
          data-plasmic-for-node={forNode}
          hasGap={true}
          className={classNames(
            projectcss.all,
            projectcss.root_reset,
            projectcss.plasmic_default_styles,
            projectcss.plasmic_mixins,
            projectcss.plasmic_tokens,
            plasmic_antd_5_hostless_css.plasmic_tokens,
            sty.root
          )}
        >
          <Stack__
            as={"div"}
            hasGap={true}
            className={classNames(projectcss.all, sty.freeBox__k1O2F)}
          >
            <div className={classNames(projectcss.all, sty.freeBox__cyAdP)}>
              <PlasmicImg__
                alt={""}
                className={classNames(sty.img__g4ASf)}
                displayHeight={"auto"}
                displayMaxHeight={"150px"}
                displayMaxWidth={"auto"}
                displayMinHeight={"0"}
                displayMinWidth={"0"}
                displayWidth={"auto"}
                loading={"lazy"}
                src={{
                  src: "/plasmic/verbum_onboarding/images/screenshot20231204At123248AmRemovebgpng.png",
                  fullWidth: 2712,
                  fullHeight: 1792,
                  aspectRatio: undefined
                }}
              />
            </div>
            <box style={{ paddingBottom: '20px', paddingRight: '24px' }}>
              <div> <Wallet /> 
              </div>
            </box>
            <Icon7Icon
              className={classNames(projectcss.all, sty.svg___6XhRa)}
              onClick={event => {
                window.open('https://twitter.com/VerbumLabs', '_blank');
              }}
              role={"img"}
            />

            <Icon8Icon
              className={classNames(projectcss.all, sty.svg__gwIlw)}
              onClick={event => {
                window.open('https://discord.gg/cvzUAkzcS7', '_blank');
              }}
              role={"img"}
              role={"img"}
            />
          </Stack__>
          <div className={classNames(projectcss.all, sty.freeBox__ytVVm)}>
            <div className={classNames(projectcss.all, sty.freeBox___7ESvz)}>
              <h1
                data-plasmic-name={"h1"}
                data-plasmic-override={overrides.h1}
                className={classNames(
                  projectcss.all,
                  projectcss.h1,
                  projectcss.__wab_text,
                  sty.h1
                )}
              >
                {"Thanks for signing up! "}
              </h1>
              <div className={classNames(projectcss.all, sty.freeBox__xk197)}>
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__x296
                  )}
                >
                  {
                    "Our platform will launch shortly. In the meantime, here's what you can expect..."
                  }
                </div>
              </div>
            </div>
          </div>
          <div className={classNames(projectcss.all, sty.freeBox__jokKd)}>
            <div className={classNames(projectcss.all, sty.freeBox__haIBw)}>
              <div className={classNames(projectcss.all, sty.freeBox__a5GFg)}>
                <div className={classNames(projectcss.all, sty.freeBox__xhno7)}>
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__qev1J
                    )}
                  >
                    <React.Fragment>
                      <span
                        className={"plasmic_default__all plasmic_default__span"}
                        style={{ fontWeight: 700 }}
                      >
                        {"Trade thousands of luxury goods"}
                      </span>
                    </React.Fragment>
                  </div>
                </div>
                <div className={classNames(projectcss.all, sty.freeBox__w1Dme)}>
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__hVmEd
                    )}
                  >
                    {
                      "With Verbum, gain access to a global marketplace where the value of luxury goods fluctuates in real time, offering opportunities for profit. Dive into a world where high-end goods meet dynamic trading, providing a thrilling way to engage with luxury markets."
                    }
                  </div>
                </div>
              </div>
              <div className={classNames(projectcss.all, sty.freeBox___2B0PB)}>
                <div
                  className={classNames(projectcss.all, sty.freeBox___3ANYc)}
                >
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__hqpQi
                    )}
                  >
                    {"Buy luxury items from verified sellers with crypto"}
                  </div>
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__thAk
                    )}
                  >
                    {
                      "After you place your item on Verbum and sell it, users can choose to sell it again on our marketplace. You will earn royalties of up to 10% from each and every sale of your item's digital representation. "
                    }
                  </div>
                </div>
              </div>
              <div className={classNames(projectcss.all, sty.freeBox__cbTma)}>
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__y5SqO
                  )}
                >
                  {"Multiple sales, ship just once"}
                </div>
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__eG8Yu
                  )}
                >
                  {
                    "Choose a shipping date up to two months after initially listing your item on Verbum. You'll ship the item to the current owner of its digital representation at that selected time."
                  }
                </div>
              </div>
            </div>
            <div className={classNames(projectcss.all, sty.freeBox__jQrpb)}>
              <PlasmicImg__
                alt={""}
                className={classNames(sty.img__ypJLs)}
                displayHeight={"auto"}
                displayMaxHeight={"none"}
                displayMaxWidth={"80%"}
                displayMinHeight={"0"}
                displayMinWidth={"0"}
                displayWidth={"auto"}
                loading={"lazy"}
                src={{
                  src: "/plasmic/verbum_onboarding/images/metehanGumusdagZ1F3D6W7DAUnsplashjpg.jpg",
                  fullWidth: 5184,
                  fullHeight: 3456,
                  aspectRatio: undefined
                }}
              />
            </div>
          </div>
          <VerbumFooter
            data-plasmic-name={"verbumFooter"}
            data-plasmic-override={overrides.verbumFooter}
            className={classNames("__wab_instance", sty.verbumFooter)}
          />

          <div className={classNames(projectcss.all, sty.freeBox___6JkzY)}>
            <div
              className={classNames(
                projectcss.all,
                projectcss.__wab_text,
                sty.text__pNdA3
              )}
            >
              {"Copyright \u00a9 2024 Verbum Labs Inc."}
            </div>
          </div>
        </Stack__>
      </div>
    </React.Fragment>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: ["root", "h1", "verbumFooter"],
  h1: ["h1"],
  verbumFooter: ["verbumFooter"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  (typeof PlasmicDescendants)[T][number];
type NodeDefaultElementType = {
  root: "div";
  h1: "h1";
  verbumFooter: typeof VerbumFooter;
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicComingSoon__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicComingSoon__VariantsArgs;
    args?: PlasmicComingSoon__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicComingSoon__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    /* Specify args directly as props*/ Omit<
      PlasmicComingSoon__ArgsType,
      ReservedPropsType
    > &
    /* Specify overrides for each element directly as props*/ Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    /* Specify props for the root element*/ Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicComingSoon__ArgProps,
          internalVariantPropNames: PlasmicComingSoon__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicComingSoon__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicComingSoon";
  } else {
    func.displayName = `PlasmicComingSoon.${nodeName}`;
  }
  return func;
}

export const PlasmicComingSoon = Object.assign(
  // Top-level PlasmicComingSoon renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    h1: makeNodeComponent("h1"),
    verbumFooter: makeNodeComponent("verbumFooter"),

    // Metadata about props expected for PlasmicComingSoon
    internalVariantProps: PlasmicComingSoon__VariantProps,
    internalArgProps: PlasmicComingSoon__ArgProps,

    // Page metadata
    pageMetadata: {
      title: "Coming Soon",
      description: "",
      ogImageSrc: "",
      canonical: ""
    }
  }
);

export default PlasmicComingSoon;
/* prettier-ignore-end */
